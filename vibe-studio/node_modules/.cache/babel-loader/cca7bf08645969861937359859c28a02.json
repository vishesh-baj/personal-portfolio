{"ast":null,"code":"var _s = $RefreshSig$();\n\n// To us gsap with locomotive scroll, we need to use scroll proxy provided by gsap\nimport gsap from \"gsap\";\nimport ScrollTrigger from \"gsap/ScrollTrigger\";\nimport React from \"react\";\nimport { useEffect } from \"react\";\nimport { useLocomotiveScroll } from \"react-locomotive-scroll\";\n\nconst ScrollTriggerProxy = () => {\n  _s();\n\n  // first lets get instance of locomotive scroll\n  const {\n    scroll\n  } = useLocomotiveScroll(); //   register scroll trigger plugin\n\n  gsap.registerPlugin(ScrollTrigger);\n  useEffect(() => {\n    if (scroll) {\n      const element = scroll === null || scroll === void 0 ? void 0 : scroll.el; // locomotive scroll element, in our case its app (main tag)\n\n      scroll.on(\"scroll\", ScrollTrigger.update); // on scroll of locomotive, update scrolltrigger\n      // use scroll proxy\n\n      ScrollTrigger.scrollerProxy(element, {\n        scrollTop(value) {\n          return arguments.length ? scroll.scrollTo(value, 0, 0) : scroll.scroll.instance.scroll.y;\n        },\n\n        // we don't have to define a scrollLeft because we're only scrolling vertically.\n        getBoundingClientRect() {\n          return {\n            top: 0,\n            left: 0,\n            width: window.innerWidth,\n            height: window.innerHeight\n          };\n        },\n\n        // LocomotiveScroll handles things completely differently on mobile devices - it doesn't even transform the container at all! So to get the correct behavior and avoid jitters, we should pin things with position: fixed on mobile. We sense it by checking to see if there's a transform applied to the container (the LocomotiveScroll-controlled element).\n        pinType: element.style.transform ? \"transform\" : \"fixed\"\n      });\n    }\n\n    return () => {\n      ScrollTrigger.addEventListener(\"refresh\", () => {\n        scroll === null || scroll === void 0 ? void 0 : scroll.update();\n      });\n      ScrollTrigger.refresh();\n    };\n  }, [scroll]);\n  return null;\n};\n\n_s(ScrollTriggerProxy, \"IwiEG3ynQwo6uTnjwSbeeNjIY+M=\", false, function () {\n  return [useLocomotiveScroll];\n});\n\n_c = ScrollTriggerProxy;\nexport default ScrollTriggerProxy;\n\nvar _c;\n\n$RefreshReg$(_c, \"ScrollTriggerProxy\");","map":{"version":3,"sources":["/Users/vishesh/Documents/repositories/personal-portfolio/vibe-studio/src/components/ScrollTriggerProxy.jsx"],"names":["gsap","ScrollTrigger","React","useEffect","useLocomotiveScroll","ScrollTriggerProxy","scroll","registerPlugin","element","el","on","update","scrollerProxy","scrollTop","value","arguments","length","scrollTo","instance","y","getBoundingClientRect","top","left","width","window","innerWidth","height","innerHeight","pinType","style","transform","addEventListener","refresh"],"mappings":";;AAAA;AAEA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,mBAAT,QAAoC,yBAApC;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAAA;;AAC/B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAaF,mBAAmB,EAAtC,CAF+B,CAG/B;;AACAJ,EAAAA,IAAI,CAACO,cAAL,CAAoBN,aAApB;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIG,MAAJ,EAAY;AACV,YAAME,OAAO,GAAGF,MAAH,aAAGA,MAAH,uBAAGA,MAAM,CAAEG,EAAxB,CADU,CACkB;;AAC5BH,MAAAA,MAAM,CAACI,EAAP,CAAU,QAAV,EAAoBT,aAAa,CAACU,MAAlC,EAFU,CAEiC;AAE3C;;AACAV,MAAAA,aAAa,CAACW,aAAd,CAA4BJ,OAA5B,EAAqC;AACnCK,QAAAA,SAAS,CAACC,KAAD,EAAQ;AACf,iBAAOC,SAAS,CAACC,MAAV,GACHV,MAAM,CAACW,QAAP,CAAgBH,KAAhB,EAAuB,CAAvB,EAA0B,CAA1B,CADG,GAEHR,MAAM,CAACA,MAAP,CAAcY,QAAd,CAAuBZ,MAAvB,CAA8Ba,CAFlC;AAGD,SALkC;;AAKhC;AACHC,QAAAA,qBAAqB,GAAG;AACtB,iBAAO;AACLC,YAAAA,GAAG,EAAE,CADA;AAELC,YAAAA,IAAI,EAAE,CAFD;AAGLC,YAAAA,KAAK,EAAEC,MAAM,CAACC,UAHT;AAILC,YAAAA,MAAM,EAAEF,MAAM,CAACG;AAJV,WAAP;AAMD,SAbkC;;AAcnC;AACAC,QAAAA,OAAO,EAAEpB,OAAO,CAACqB,KAAR,CAAcC,SAAd,GAA0B,WAA1B,GAAwC;AAfd,OAArC;AAiBD;;AAED,WAAO,MAAM;AACX7B,MAAAA,aAAa,CAAC8B,gBAAd,CAA+B,SAA/B,EAA0C,MAAM;AAC9CzB,QAAAA,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEK,MAAR;AACD,OAFD;AAIAV,MAAAA,aAAa,CAAC+B,OAAd;AACD,KAND;AAOD,GAhCQ,EAgCN,CAAC1B,MAAD,CAhCM,CAAT;AAkCA,SAAO,IAAP;AACD,CAzCD;;GAAMD,kB;UAEeD,mB;;;KAFfC,kB;AA2CN,eAAeA,kBAAf","sourcesContent":["// To us gsap with locomotive scroll, we need to use scroll proxy provided by gsap\n\nimport gsap from \"gsap\";\nimport ScrollTrigger from \"gsap/ScrollTrigger\";\nimport React from \"react\";\nimport { useEffect } from \"react\";\nimport { useLocomotiveScroll } from \"react-locomotive-scroll\";\n\nconst ScrollTriggerProxy = () => {\n  // first lets get instance of locomotive scroll\n  const { scroll } = useLocomotiveScroll();\n  //   register scroll trigger plugin\n  gsap.registerPlugin(ScrollTrigger);\n\n  useEffect(() => {\n    if (scroll) {\n      const element = scroll?.el; // locomotive scroll element, in our case its app (main tag)\n      scroll.on(\"scroll\", ScrollTrigger.update); // on scroll of locomotive, update scrolltrigger\n\n      // use scroll proxy\n      ScrollTrigger.scrollerProxy(element, {\n        scrollTop(value) {\n          return arguments.length\n            ? scroll.scrollTo(value, 0, 0)\n            : scroll.scroll.instance.scroll.y;\n        }, // we don't have to define a scrollLeft because we're only scrolling vertically.\n        getBoundingClientRect() {\n          return {\n            top: 0,\n            left: 0,\n            width: window.innerWidth,\n            height: window.innerHeight,\n          };\n        },\n        // LocomotiveScroll handles things completely differently on mobile devices - it doesn't even transform the container at all! So to get the correct behavior and avoid jitters, we should pin things with position: fixed on mobile. We sense it by checking to see if there's a transform applied to the container (the LocomotiveScroll-controlled element).\n        pinType: element.style.transform ? \"transform\" : \"fixed\",\n      });\n    }\n\n    return () => {\n      ScrollTrigger.addEventListener(\"refresh\", () => {\n        scroll?.update();\n      });\n\n      ScrollTrigger.refresh();\n    };\n  }, [scroll]);\n\n  return null;\n};\n\nexport default ScrollTriggerProxy;\n"]},"metadata":{},"sourceType":"module"}